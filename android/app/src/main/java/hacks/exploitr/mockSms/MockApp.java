package hacks.exploitr.mockSms;

import android.app.Application;
import android.os.Handler;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.widget.Toast;

import com.crashlytics.android.Crashlytics;
import com.github.javiersantos.piracychecker.PiracyChecker;
import com.github.javiersantos.piracychecker.enums.PiracyCheckerCallback;
import com.github.javiersantos.piracychecker.enums.PiracyCheckerError;
import com.github.javiersantos.piracychecker.enums.PirateApp;
import com.google.android.gms.ads.MobileAds;

import io.fabric.sdk.android.Fabric;

import static hacks.exploitr.mockSms.MainActivity.BUILD_DEBUG;

public class MockApp extends Application {

    @Override
    public void onCreate() {
        MobileAds.initialize(this, "ca-a87hq3e47o8yj7o8jd4q3n7on7o8");
        if (!BUILD_DEBUG) {
            Fabric.with(this, new Crashlytics());
        }
        new PiracyChecker(this)
                //   .enableDebugCheck(true)
                .enableEmulatorCheck(true)
                .enableStoresCheck(true)
                .enableUnauthorizedAppsCheck(true)
                .enableStoresCheck(true)
                .saveResultToSharedPreferences(getSharedPreferences("boo", MODE_PRIVATE), "valid_license")
                //    .enableInstallerId(InstallerID.GOOGLE_PLAY, InstallerID.GALAXY_APPS, InstallerID.AMAZON_APP_STORE)
                .callback(new PiracyCheckerCallback() {
                    @Override
                    public void allow() {
                        Toast.makeText(MockApp.this, "Thanks for using!", Toast.LENGTH_SHORT).show();
                    }

                    @Override
                    public void dontAllow(@NonNull PiracyCheckerError error, @Nullable PirateApp app) {
                        Toast.makeText(MockApp.this, error.toString(), Toast.LENGTH_SHORT).show();
                        new Handler().postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                System.exit(0);
                            }
                        }, 10000);
                    }

                    @Override
                    public void onError(@NonNull PiracyCheckerError error) {
                        if (!(error == PiracyCheckerError.UNKNOWN | error == PiracyCheckerError.CHECK_IN_PROGRESS)) {
                            new Handler().postDelayed(new Runnable() {
                                @Override
                                public void run() {
                                    System.exit(0);
                                }
                            }, 10000);
                        }
                        Crashlytics.logException(new RuntimeException(error.toString()));
                    }
                })
                .start();
        super.onCreate();
    }
}
