package hacks.exploitr.mockSms;

import android.Manifest;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.content.ContentValues;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Color;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.VibrationEffect;
import android.os.Vibrator;
import android.provider.ContactsContract;
import android.provider.Telephony;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.WebView;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;

import com.crashlytics.android.Crashlytics;
import com.github.javiersantos.piracychecker.PiracyChecker;
import com.github.javiersantos.piracychecker.enums.InstallerID;
import com.github.javiersantos.piracychecker.enums.PiracyCheckerCallback;
import com.github.javiersantos.piracychecker.enums.PiracyCheckerError;
import com.github.javiersantos.piracychecker.enums.PirateApp;
import com.google.android.gms.ads.AdListener;
import com.google.android.gms.ads.AdRequest;
import com.google.android.gms.ads.AdView;
import com.google.android.gms.ads.InterstitialAd;
import com.google.android.gms.ads.MobileAds;
import com.google.android.gms.ads.reward.RewardItem;
import com.google.android.gms.ads.reward.RewardedVideoAd;
import com.google.android.gms.ads.reward.RewardedVideoAdListener;
import com.wdullaer.materialdatetimepicker.date.DatePickerDialog;
import com.wdullaer.materialdatetimepicker.time.TimePickerDialog;

import java.security.SecureRandom;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Objects;
import java.util.concurrent.TimeUnit;

import de.psdev.licensesdialog.LicensesDialog;
import de.psdev.licensesdialog.licenses.ApacheSoftwareLicense20;
import de.psdev.licensesdialog.model.Notice;
import de.psdev.licensesdialog.model.Notices;
import hacks.exploitr.Constants.All;
import hacks.exploitr.Constants.Extra;

@SuppressLint({"InflateParams"})
public class MainActivity extends AppCompatActivity implements DatePickerDialog.OnDateSetListener, TimePickerDialog.OnTimeSetListener, AdapterView.OnItemClickListener {

    public static final boolean BUILD_DEBUG = true;
    private static final int CHANGE_FROM_DEF = 230;
    private static final int CHANGE_TO_DEF = 231;
    private static final int CHANGE_TO_DEF_STRICT = 232;
    private static final int REQ_PHONE = 233;
    private static final int REQ_PERM = 234;
    private static final String DATE_PICK_TAG = "tow";
    private static final String[] smsTypes = new String[]{"inbox", "sent",
            "draft", "outbox", "failed", "queued"
    };
    private static final String[] requiredPerms = new String[]{
            Manifest.permission.READ_SMS,
            Manifest.permission.READ_CONTACTS,
            Manifest.permission.BROADCAST_SMS,
            Manifest.permission.RECEIVE_SMS,
            Manifest.permission.SEND_SMS,
            Manifest.permission.VIBRATE,
            Manifest.permission.ACCESS_NETWORK_STATE
    };
    private static final Integer[] items = {R.drawable.terms_n_conds, R.drawable.pv_policy_final, R.drawable.des_final, R.drawable.ic_help};
    private static String DEF_PKG = "hacks.exploitr.mockSms";
    private static boolean slotOk = false;
    private static boolean imsiOk = false;
    private static boolean serviceNumOk = false;
    private static boolean timediffOk = false;
    private TextView contactView, dateView;
    private Spinner types;
    private EditText messageMain;
    private Calendar calendar;
    private DatePickerDialog datePickerDialog;
    private TimePickerDialog timePickerDialog;
    private InterstitialAd mInterstitialAd;
    private boolean adFoe = false;
    private RewardedVideoAd mRewardedVideoAd;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        if (!Objects.equals(getIntent().getStringExtra("good_poo"), "123456789012345576778" + Build.FINGERPRINT)) {
            new PiracyChecker(this)
                    .enableDebugCheck(true)
                    .enableEmulatorCheck(true)
                    .enableStoresCheck(true)
                    .enableUnauthorizedAppsCheck(true)
                    .saveResultToSharedPreferences(getSharedPreferences("boo", MODE_PRIVATE), "valid_license")
                    .enableInstallerId(InstallerID.GOOGLE_PLAY, InstallerID.GALAXY_APPS, InstallerID.AMAZON_APP_STORE)
                    .callback(new PiracyCheckerCallback() {
                        @Override
                        public void allow() {
                            Toast.makeText(MainActivity.this, "Thanks for using!", Toast.LENGTH_SHORT).show();
                        }

                        @Override
                        public void dontAllow(@NonNull PiracyCheckerError error, @Nullable PirateApp app) {
                            Intent x = new Intent(MainActivity.this, Message.class);
                            x.putExtra("good_poo", error.toString());
                            startActivity(x);
                            finish();
                        }

                        @Override
                        public void onError(@NonNull PiracyCheckerError error) {
                            Crashlytics.logException(new RuntimeException(error.toString()));
                        }
                    })
                    .start();
        }

        calendar = Calendar.getInstance();

        contactView = findViewById(R.id.contact_view);
        dateView = findViewById(R.id.date);

        Button pickNumber = findViewById(R.id.pickNumber);
        Button pickDate = findViewById(R.id.pick_date);

        Button set_extra = findViewById(R.id.set_extra);
        Button enable_extra = findViewById(R.id.enable_extra);

        messageMain = findViewById(R.id.messageMain);

        contactView.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                if (s.toString().length() < 3) {
                    contactView.setTextColor(Color.RED);
                } else if (s.toString().length() == 10) {
                    contactView.setTextColor(Color.BLACK);
                } else {
                    contactView.setTextColor(Color.BLUE);
                }
            }
        });

        pickNumber.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(Intent.ACTION_PICK);
                intent.setType(ContactsContract.CommonDataKinds.Phone.CONTENT_TYPE);
                startActivityForResult(intent, REQ_PHONE);
            }
        });

        pickDate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                datePickerDialog = DatePickerDialog.newInstance(MainActivity.this, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));
                timePickerDialog = TimePickerDialog.newInstance(MainActivity.this, calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), 0, true);
                datePickerDialog.setYearRange(2000, 2037);
                datePickerDialog.show(getFragmentManager(), DATE_PICK_TAG);
            }
        });

        types = findViewById(R.id.types);

        ArrayAdapter <String> superAdapter = new ArrayAdapter <>(this, R.layout.support_simple_spinner_dropdown_item, smsTypes);
        types.setAdapter(superAdapter);

        set_extra.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                View set_extra_view = getLayoutInflater().inflate(R.layout.extra_set_layout, null);

                final EditText sim_slot, imsi, service_center, difference;
                final Spinner status;

                sim_slot = set_extra_view.findViewById(R.id.sim_slot);
                imsi = set_extra_view.findViewById(R.id.imsi);
                service_center = set_extra_view.findViewById(R.id.service_center);
                difference = set_extra_view.findViewById(R.id.difference);
                status = set_extra_view.findViewById(R.id.status);

                sim_slot.setText(String.valueOf(Extra.getInstance(getBaseContext()).getSimSlot()));
                imsi.setText(String.valueOf(Extra.getInstance(getBaseContext()).getSimImsi()));
                service_center.setText(String.valueOf(Extra.getInstance(getBaseContext()).getServiceCenter()));
                difference.setText(String.valueOf(Extra.getInstance(getBaseContext()).getTimeDifference()));
                status.setSelection(Extra.getInstance(getBaseContext()).getSmsStatus());

                sim_slot.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {

                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                        slotOk = s.toString().length() >= 1;
                    }
                });
                imsi.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {

                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                        String bow = s.toString();
                        if (bow.length() >= 10 && bow.length() <= 19) {
                            imsiOk = true;
                            imsi.setTextColor(Color.BLACK);
                        } else {
                            imsiOk = false;
                            imsi.setTextColor(Color.RED);
                        }
                    }
                });//TEXT-VERIFICATION
                service_center.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {

                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                        String bow = s.toString();
                        if (bow.length() >= 10 && bow.length() <= 19) {
                            serviceNumOk = true;
                            service_center.setTextColor(Color.BLACK);
                        } else {
                            serviceNumOk = false;
                            service_center.setTextColor(Color.RED);
                        }
                    }
                }); //Serv Verification
                difference.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {

                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                        if (s.length() > 0) {
                            if (Integer.parseInt(s.toString()) >= 5 && Integer.parseInt(s.toString()) <= 9999) {
                                timediffOk = true;
                                difference.setTextColor(Color.BLACK);
                            }
                        } else {
                            timediffOk = false;
                            difference.setTextColor(Color.RED);
                        }
                    }
                });

                new AlertDialog.Builder(MainActivity.this)
                        .setTitle("Set SMS Properties")
                        .setView(set_extra_view)
                        .setCancelable(false)
                        .setPositiveButton("Done", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                if (slotOk) {
                                    Extra.getInstance(getBaseContext()).setSimSlot(Integer.parseInt(sim_slot.getText().toString()));
                                } else {
                                    Extra.getInstance(getBaseContext()).setSimSlot(1);
                                }
                                if (imsiOk) {
                                    Extra.getInstance(getBaseContext()).setSimImsi(Long.parseLong(imsi.getText().toString()));
                                } else {
                                    Extra.getInstance(getBaseContext()).setSimImsi((System.currentTimeMillis() / 1000) + new SecureRandom().nextInt(2147483647));
                                }
                                if (serviceNumOk) {
                                    Extra.getInstance(getBaseContext()).setServiceCenter(Long.parseLong(service_center.getText().toString()));
                                } else {
                                    Extra.getInstance(getBaseContext()).setServiceCenter((System.currentTimeMillis() / 1000) + new SecureRandom().nextInt(2147483647));
                                }
                                if (timediffOk) {
                                    Extra.getInstance(getBaseContext()).setTimeDifference(Integer.parseInt(difference.getText().toString()));
                                } else {
                                    Extra.getInstance(getBaseContext()).setTimeDifference(15);
                                }

                                Extra.getInstance(getBaseContext()).setSmsStatus(status.getSelectedItemPosition());
                            }
                        }).show();
            }
        });

        enable_extra.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                View extra_view = getLayoutInflater().inflate(R.layout.extra_pro_layout, null);

                Switch read, seen, delivered, slot, imsi, reply_path, service_center, difference, status;

                read = extra_view.findViewById(R.id.read);
                read.setChecked(Extra.getInstance(getBaseContext()).isRead());
                read.setOnCheckedChangeListener(listener(ROLL.READ.ordinal()));

                seen = extra_view.findViewById(R.id.seen);
                seen.setOnCheckedChangeListener(listener(ROLL.SEEN.ordinal()));
                seen.setChecked(Extra.getInstance(getBaseContext()).isSeen());

                delivered = extra_view.findViewById(R.id.delivered);
                delivered.setOnCheckedChangeListener(listener(ROLL.DELIVERED.ordinal()));
                delivered.setChecked(Extra.getInstance(getBaseContext()).isDelivered());

                slot = extra_view.findViewById(R.id.slot);
                slot.setOnCheckedChangeListener(listener(ROLL.SLOT.ordinal()));
                slot.setChecked(Extra.getInstance(getBaseContext()).isSLOT_ENABLED());

                imsi = extra_view.findViewById(R.id.imsi);
                imsi.setOnCheckedChangeListener(listener(ROLL.IMSI.ordinal()));
                imsi.setChecked(Extra.getInstance(getBaseContext()).isIMSI_ENABLED());

                reply_path = extra_view.findViewById(R.id.reply_path);
                reply_path.setOnCheckedChangeListener(listener(ROLL.REPLY_PATH.ordinal()));
                reply_path.setChecked(Extra.getInstance(getBaseContext()).isREPLY_PATH_PRESENT());

                service_center = extra_view.findViewById(R.id.service_center);
                service_center.setOnCheckedChangeListener(listener(ROLL.SERVICE_CENTER.ordinal()));
                service_center.setChecked(Extra.getInstance(getBaseContext()).isServiceCenterBool());

                difference = extra_view.findViewById(R.id.difference);
                difference.setOnCheckedChangeListener(listener(ROLL.TIME_DIFFERENCE.ordinal()));
                difference.setChecked(Extra.getInstance(getBaseContext()).isDifferenceEnabled());

                status = extra_view.findViewById(R.id.status);
                status.setOnCheckedChangeListener(listener(ROLL.STATUS.ordinal()));
                status.setChecked(Extra.getInstance(getBaseContext()).isSMSStatusEnabled());

                // Too complicated huh?

                new AlertDialog.Builder(MainActivity.this)
                        .setTitle("Enable SMS Properties")
                        .setView(extra_view)
                        .setCancelable(false)
                        .setPositiveButton("Done", null)
                        .show();
            }
        });

        findViewById(R.id.fab).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Crafting SMS using given details " + new String(Character.toChars(128517)), Snackbar.LENGTH_SHORT).show();
                startSMSWork();
                if (mInterstitialAd.isLoaded() && (Extra.getInstance(getBaseContext()).getCount() == 4)) {
                    mInterstitialAd.show();
                } else {
                    Extra.getInstance(getBaseContext()).setCount(Extra.getInstance(getBaseContext()).getCount() + 1);
                }
            }
        });

        findViewById(R.id.ad_settings).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, FreeActivity.class));
            }
        });

        checkPermissions();

        if (Telephony.Sms.getDefaultSmsPackage(getApplicationContext()).equals(getPackageName())) {
            showDialogChange();
        }

        showAndSetAdFreeExperience();
    }

    private void showAndSetAdFreeExperience() {
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                if (Extra.getInstance(getBaseContext()).getAdFreeExpBool() && (Extra.getInstance(getBaseContext()).getAdFreeExpTimeTill() > System.currentTimeMillis())) {
                    adFoe = true;
                } else if (!Extra.getInstance(getBaseContext()).getAdKicked()) {
                    ConnectivityManager manager = (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);
                    if (manager != null) {
                        NetworkInfo info = manager.getActiveNetworkInfo();
                        if (info != null) {
                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    Extra.getInstance(getBaseContext()).setAdKicked();
                                    new AlertDialog.Builder(MainActivity.this)
                                            .setTitle("Want an ad-free experience?")
                                            .setMessage("See a video to get 15 minutes of totally ad-free experience? (Clicking the ad will multiply time by 2)")
                                            .setPositiveButton("See", new DialogInterface.OnClickListener() {
                                                @Override
                                                public void onClick(DialogInterface dialog, int which) {
                                                    Toast.makeText(MainActivity.this, "Ad will load shortly", Toast.LENGTH_SHORT).show();
                                                    mRewardedVideoAd = MobileAds.getRewardedVideoAdInstance(MainActivity.this);
                                                    mRewardedVideoAd.setRewardedVideoAdListener(rewardsListener());
                                                    mRewardedVideoAd.loadAd(All.ID_0_REW,
                                                            new AdRequest.Builder().build());
                                                }
                                            })
                                            .setNegativeButton("No,Thanks", null)
                                            .show(); //TODO remove test code
                                }
                            });
                        }
                    }
                } else {
                    Extra.getInstance(getBaseContext()).setAdFreeExpTimeTill(0);
                    Extra.getInstance(getBaseContext()).setAdFreeExpBool(false);
                    adFoe = false;
                }
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        startDaWork();
                        showDa();
                    }
                });
            }
        },2000);
    }

    private RewardedVideoAdListener rewardsListener() {
        return new RewardedVideoAdListener() {
            @Override
            public void onRewardedVideoAdLoaded() {
                mRewardedVideoAd.show();
            }

            @Override
            public void onRewardedVideoAdOpened() {

            }

            @Override
            public void onRewardedVideoStarted() {

            }

            @Override
            public void onRewardedVideoAdClosed() {

            }

            @Override
            public void onRewarded(RewardItem rewardItem) {
                Extra.getInstance(getBaseContext()).setAdKicked();
                Extra.getInstance(getBaseContext()).setAdFreeExpBool(true);
                Toast.makeText(getBaseContext(), "You're gifted +15 minutes!! Thanks!", Toast.LENGTH_SHORT).show();
                Extra.getInstance(getBaseContext()).setAdFreeExpTimeTill(Extra.getInstance(getBaseContext()).getAdFreeExpTimeTill() + TimeUnit.MINUTES.toMillis(15));
            }

            @Override
            public void onRewardedVideoAdLeftApplication() {

            }

            @Override
            public void onRewardedVideoAdFailedToLoad(int i) {
                Toast.makeText(getApplicationContext(), "No videos are available, please try later", Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onRewardedVideoCompleted() {
            }
        };
    }

    private void startDaWork() {
        if (!adFoe) {
            AdView mAdView = findViewById(R.id.adView);
            AdRequest adRequest = new AdRequest.Builder().build();
            mAdView.loadAd(adRequest);

            mInterstitialAd = new InterstitialAd(this);
            mInterstitialAd.setAdUnitId(All.ID_0_INTER);
            mInterstitialAd.loadAd(new AdRequest.Builder().build());
            mInterstitialAd.setAdListener(new AdListener() {
                @Override
                public void onAdLoaded() {
                    Extra.getInstance(getBaseContext()).setCount(0);
                }

                @Override
                public void onAdFailedToLoad(int errorCode) {
                    Crashlytics.log("Ad ErrorCode" + errorCode);
                }

                @Override
                public void onAdOpened() {
                    Extra.getInstance(getBaseContext()).setCount(0);
                }

                @Override
                public void onAdLeftApplication() {
                    Extra.getInstance(getBaseContext()).setCount(0);
                }

                @Override
                public void onAdClosed() {
                    mInterstitialAd.loadAd(new AdRequest.Builder().build());
                }
            });
        }
    }

    private void showDa() {
        if (!Extra.getInstance(getBaseContext()).isOLD()) {
            new AlertDialog.Builder(MainActivity.this)
                    .setTitle("Hello!")
                    .setCancelable(false)
                    .setMessage("Thanks for trying my app!\n\n" +
                            "It's my pleasure that you're using it.\n\n" +
                            "This app(exactly this one) is made possible because I've spent\n" +
                            "my time (which is also important as your time), effort and also\n" +
                            "much thing(like paying Internet cost) to make this.\n\n" +
                            "So, I've placed some ads on this.(They're relevant I promise!) \n\n" +
                            "I think you'll understand.")
                    .setPositiveButton("I acknowledge",null).show();
            Extra.getInstance(getBaseContext()).setOld();
        }
    }

    private Switch.OnCheckedChangeListener listener(final int roll) {
        return new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (roll == ROLL.READ.ordinal()) {
                    Extra.getInstance(getBaseContext()).setRead(isChecked);
                } else if (roll == ROLL.SEEN.ordinal()) {
                    Extra.getInstance(getBaseContext()).setSeen(isChecked);
                } else if (roll == ROLL.DELIVERED.ordinal()) {
                    Extra.getInstance(getBaseContext()).setDelivered(isChecked);
                } else if (roll == ROLL.SLOT.ordinal()) {
                    Extra.getInstance(getBaseContext()).setSLOT_ENABLED(isChecked);
                } else if (roll == ROLL.IMSI.ordinal()) {
                    Extra.getInstance(getBaseContext()).setIMSI_ENABLED(isChecked);
                } else if (roll == ROLL.REPLY_PATH.ordinal()) {
                    Extra.getInstance(getBaseContext()).setREPLY_PATH_PRESENT(isChecked);
                } else if (roll == ROLL.SERVICE_CENTER.ordinal()) {
                    Extra.getInstance(getBaseContext()).setServiceCenterBool(isChecked);
                } else if (roll == ROLL.TIME_DIFFERENCE.ordinal()) {
                    Extra.getInstance(getBaseContext()).setTimeDifferenceBool(isChecked);
                } else if (roll == ROLL.STATUS.ordinal()) {
                    Extra.getInstance(getBaseContext()).setSmsStatusBool(isChecked);
                }
            }
        };
    }

    @TargetApi(Build.VERSION_CODES.M)
    private void checkPermissions() {
        int i = 0;
        for (String singlePerm : requiredPerms) {
            i = i + checkSelfPermission(singlePerm);
        }
        if (i > 0) {
            requestPermissions(requiredPerms, REQ_PERM);
        }
    }

    void startSMSWork() {
        DEF_PKG = Telephony.Sms.getDefaultSmsPackage(getApplicationContext());

        boolean tic = messageMain.getText().length() > 0;
        boolean tac = contactView.getText().length() >= 3;

        if (!tic) {
            Toast.makeText(getBaseContext(), "You need a message to save " + new String(Character.toChars(128530)), Toast.LENGTH_SHORT).show();
            return;
        }
        if (!tac) {
            Toast.makeText(getBaseContext(), "Invalid Phone Number " + new String(Character.toChars(128530)), Toast.LENGTH_SHORT).show();
            return;
        }
        // can't write toe :-(
        if (Telephony.Sms.getDefaultSmsPackage(getApplicationContext()).equals(getPackageName())) {
            doCreateSmsAndChangeDef();
        } else {
            Intent localIntent = new Intent("android.provider.Telephony.ACTION_CHANGE_DEFAULT");
            localIntent.putExtra("package", getPackageName());
            startActivityForResult(localIntent, CHANGE_FROM_DEF);
        }
    }

    private void doCreateSmsAndChangeDef() {
        if (DEF_PKG.equals(getPackageName())) {
            Toast.makeText(getBaseContext(), "Looks like MockSMS is the default SMS app.Is this normal? " + new String(Character.toChars(128556)), Toast.LENGTH_SHORT).show();
            if (saveSms(types.getSelectedItem().toString())) {
                showDialogChange();
            } else {
                showDialogChange();
                Toast.makeText(getBaseContext(), "Message Creation Failed !", Toast.LENGTH_SHORT).show();
            }
        } else {
            if (saveSms(types.getSelectedItem().toString())) {
                Intent localIntent = new Intent("android.provider.Telephony.ACTION_CHANGE_DEFAULT");
                localIntent.putExtra("package", DEF_PKG);
                startActivityForResult(localIntent, CHANGE_TO_DEF);
            } else {
                showDialogChange();
                Toast.makeText(getBaseContext(), "Message Creation Failed !", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void showDialogChange() {
        ArrayList <String> bow = new ArrayList <>();
        final HashMap memoryMap = Utils.getSMSAppsContent(getBaseContext());

        for (Object x : memoryMap.values()) {
            bow.add(x.toString());
        }
        ArrayAdapter <String> adapter =
                new ArrayAdapter <>(
                        getBaseContext(),
                        R.layout.support_simple_spinner_dropdown_item, bow);

        View mainTow = getLayoutInflater().inflate(R.layout.change_dialog, null);
        ListView view = mainTow.findViewById(R.id.appsList);
        view.setAdapter(adapter);

        final AlertDialog dex = new AlertDialog.Builder(MainActivity.this).setView(mainTow)
                .setTitle("Switch | It\'s not an SMS app")
                .setCancelable(false)
                .show();

        view.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView <?> parent, View view, int position, long id) {
                Intent localIntent = new Intent("android.provider.Telephony.ACTION_CHANGE_DEFAULT");
                localIntent.putExtra("package", (String) memoryMap.keySet().toArray()[position]);
                startActivityForResult(localIntent, CHANGE_TO_DEF_STRICT);
                dex.dismiss();
            }
        });


    }

    @NonNull
    private ContentValues returnContentValues(String folderName) {
        ContentValues values = new ContentValues();
        //Address
        values.put(All.ADDRESS, contactView.getText().toString());
        values.put(All.BODY, messageMain.getText().toString());
        //Sim slot
        if (Build.BRAND.contains("Samsung") | Build.BRAND.contains("samsung")) {
            if (Extra.getInstance(getBaseContext()).isSLOT_ENABLED()) {
                values.put(All.SIM_SLOT_SAMSUNG, Extra.getInstance(getBaseContext()).getSimSlot());
            }
            if (Extra.getInstance(getBaseContext()).isIMSI_ENABLED()) {
                values.put(All.SIM_IMSI_SAMSUNG, Extra.getInstance(getBaseContext()).getSimImsi());
            }
        } else if (Extra.getInstance(getBaseContext()).isSLOT_ENABLED()) {
            values.put(All.SUB_SLOT_LYF, Extra.getInstance(getBaseContext()).getSimSlot());
        }
        if (Extra.getInstance(getBaseContext()).isREPLY_PATH_PRESENT()) {
            values.put(All.REPLY_PATH_PRESENT, 1);
        }
        if (Extra.getInstance(getBaseContext()).isServiceCenterBool()) {
            values.put(All.SERVICE_CENTER, Extra.getInstance(getBaseContext()).getServiceCenter());
        }

        values.put(All.DATE_SENT, calendar.getTimeInMillis() - TimeUnit.MINUTES.toMillis(Extra.getInstance(getBaseContext()).getTimeDifference()));

        if (folderName.equals("sent")) {
            values.put(All.STATUS, Extra.getInstance(getBaseContext()).getSmsStatus());
            if (Extra.getInstance(getBaseContext()).isDelivered()) {
                values.put(All.DELIVERED, 1);
            }
        } else {
            if (Extra.getInstance(getBaseContext()).isRead()) {
                values.put(All.READ, 1);
            }
            if (Extra.getInstance(getBaseContext()).isSeen()) {
                values.put(All.SEEN, 1);
            }
        }

        return values;
    }

    /*see @link https://stackoverflow.com/questions/12243870/write-sent-sms-to-content-sms-sent-table?
     */
    public boolean saveSms(String folderName) {
        boolean taskStatus = true;
        try {
            ContentValues values = returnContentValues(folderName);
            getApplicationContext().getContentResolver().insert(Uri.parse("content://sms/" + folderName), values);
        } catch (Exception ex) {
            L.p(ex.getMessage());
            taskStatus = false;
        }
        return taskStatus;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        if (requestCode == REQ_PHONE) {

            if (resultCode == RESULT_OK && data.getData() != null) {
                String[] projection = new String[]{ContactsContract.CommonDataKinds.Phone.NUMBER};
                Cursor cursor = getContentResolver().query(data.getData(), projection,
                        null, null, null);
                if (cursor != null && cursor.moveToFirst()) {
                    int numberIndex = cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER);
                    String number = cursor.getString(numberIndex);
                    contactView.setText(number.replaceAll("\\s+", ""));
                    Toast.makeText(this, "Selected " + number, Toast.LENGTH_SHORT).show();
                    cursor.close();
                }
            } else {
                Toast.makeText(this.getBaseContext(), "Invalid Number Selected " + new String(Character.toChars(128580)), Toast.LENGTH_SHORT).show();
            }

        } else if (requestCode == CHANGE_FROM_DEF) {
            if (resultCode == RESULT_OK) {
                doCreateSmsAndChangeDef();
            } else {
                Toast.makeText(this, "Permission Denied. Did you really need it to do ? " + new String(Character.toChars(128529)), Toast.LENGTH_SHORT).show();
            }
        } else if (requestCode == REQ_PERM) {
            if (resultCode != PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, "MockSMS requires permissions to be granted to work " + new String(Character.toChars(128529)), Toast.LENGTH_SHORT).show();
                finish();
            }
        } else if (requestCode == CHANGE_TO_DEF) {
            if (resultCode == RESULT_OK) {
                Toast.makeText(getBaseContext(),
                        "Done Creating Fake SMS " + new String(Character.toChars(128520)), Toast.LENGTH_LONG).show();
            } else {
                Toast.makeText(getBaseContext(),
                        "Done Creating Fake SMS " + new String(Character.toChars(128520)), Toast.LENGTH_LONG).show();
                showDialogChange();
            }
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true; //un-coded
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            View topView = getLayoutInflater().inflate(R.layout.bad_quality_content, null);
            setupGrids(topView);
            new AlertDialog.Builder(MainActivity.this)
                    .setTitle("Info")
                    .setView(topView)
                    .setPositiveButton("Back", null)
                    .setNeutralButton("Open-Source Licenses", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            Notices notices = new Notices();
                            notices.addNotice(new Notice("AppCompat", "https://developer.android.com/reference/android/support/v7/appcompat/package-summary", "Google", new ApacheSoftwareLicense20()));
                            notices.addNotice(new Notice("Android Support Library", "https://developer.android.com/topic/libraries/support-library/", "Google", new ApacheSoftwareLicense20()));
                            notices.addNotice(new Notice("MaterialDateTimePicker", "https://github.com/wdullaer/MaterialDateTimePicker", "wdullaer", new ApacheSoftwareLicense20()));
                            notices.addNotice(new Notice("PiracyChecker", "https://github.com/javiersantos/PiracyChecker", "javiersantos", new ApacheSoftwareLicense20()));
                            notices.addNotice(new Notice("LicensesDialog", "https://github.com/PSDev/LicensesDialog", "PSDev", new ApacheSoftwareLicense20()));

                            new LicensesDialog.Builder(MainActivity.this)
                                    .setNotices(notices)
                                    .build()
                                    .show();

                            Toast.makeText(MainActivity.this, "Scroll Down", Toast.LENGTH_SHORT).show();
                        }
                    })
                    .show();
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    private void setupGrids(View topView) {
        GridView grid = topView.findViewById(R.id.mainGrid);
        grid.setAdapter(new CustomGridAdapter(this, items));
        grid.setOnItemClickListener(this);
    }

    @SuppressLint("SetJavaScriptEnabled")
    @Override
    public void onItemClick(AdapterView <?> arg0, View arg1, int position, long arg3) {
        ScrollView view = new ScrollView(this);
        LinearLayout layout = new LinearLayout(this);
        WebView web = new WebView(MainActivity.this);
        layout.addView(web);
        view.addView(layout);
        if (position == 0) {
            view.setPadding(30, 10, 30, 10);
            web.getSettings().setJavaScriptEnabled(true);
            web.loadDataWithBaseURL("", All.TERMS_AND_CONDITIONS, "text/html", "UTF-8", "");
            new AlertDialog.Builder(this)
                    .setView(view)
                    .setTitle("Terms And Conditions")
                    .setPositiveButton("Mail me", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            Intent i = new Intent(Intent.ACTION_SEND);
                            i.setType("message/rfc822");
                            i.putExtra(Intent.EXTRA_EMAIL, new String[]{"pratimmajumder1@gmail.com"});
                            i.putExtra(Intent.EXTRA_SUBJECT, "Help Related To MockSMS");
                            i.putExtra(Intent.EXTRA_TEXT, String.format(Locale.US, "-----------------------\n" +
                                    ": DON\'T EDIT :\n" +
                                    "\n" +
                                    "Device : %s\n" +
                                    "Manufacturer : %s\n" +
                                    "Model : %s\n" +
                                    "Android Version : %s\n" +
                                    "Crunchy ? : %s\n" +
                                    "-----------------------\n" +
                                    "Write Below ↓\n" +
                                    "-----------------------\n\n", Build.DEVICE, Build.MANUFACTURER, Build.MODEL, Build.VERSION.SDK_INT, getDot()
                            ));
                            try {
                                startActivity(Intent.createChooser(i, "Send mail..."));
                            } catch (android.content.ActivityNotFoundException ex) {
                                Toast.makeText(MainActivity.this, "There are no email clients installed.", Toast.LENGTH_SHORT).show();
                            }
                        }
                    })
                    .show();
        } else if (position == 1) {
            view.setPadding(30, 10, 30, 10);
            web.getSettings().setJavaScriptEnabled(true);
            web.loadDataWithBaseURL("", All.PRIVACY_POLICY_TEXT, "text/html", "UTF-8", "");
            new AlertDialog.Builder(this)
                    .setView(view)
                    .setTitle("Privacy Policy")
                    .setPositiveButton("Mail me", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            Intent i = new Intent(Intent.ACTION_SEND);
                            i.setType("message/rfc822");
                            i.putExtra(Intent.EXTRA_EMAIL, new String[]{"pratimmajumder1@gmail.com"});
                            i.putExtra(Intent.EXTRA_SUBJECT, "Help Related To MockSMS");
                            i.putExtra(Intent.EXTRA_TEXT, String.format(Locale.US, "-----------------------\n" +
                                    ": DON\'T EDIT :\n" +
                                    "\n" +
                                    "Device : %s\n" +
                                    "Manufacturer : %s\n" +
                                    "Model : %s\n" +
                                    "Android Version : %s\n" +
                                    "Crunchy ? : %s\n" +
                                    "-----------------------\n" +
                                    "Write Below ↓\n" +
                                    "-----------------------\n\n", Build.DEVICE, Build.MANUFACTURER, Build.MODEL, Build.VERSION.SDK_INT, getDot()
                            ));
                            try {
                                startActivity(Intent.createChooser(i, "Send mail..."));
                            } catch (android.content.ActivityNotFoundException ex) {
                                Toast.makeText(MainActivity.this, "There are no email clients installed.", Toast.LENGTH_SHORT).show();
                            }
                        }
                    })
                    .show();
        } else if (position == 2) {
            view.setPadding(30, 10, 30, 10);
            web.getSettings().setJavaScriptEnabled(true);
            web.loadDataWithBaseURL("", All.DISCLAIMER, "text/html", "UTF-8", "");
            new AlertDialog.Builder(this)
                    .setView(view)
                    .setTitle("Disclaimer")
                    .setPositiveButton("Mail me", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            Intent i = new Intent(Intent.ACTION_SEND);
                            i.setType("message/rfc822");
                            i.putExtra(Intent.EXTRA_EMAIL, new String[]{"pratimmajumder1@gmail.com"});
                            i.putExtra(Intent.EXTRA_SUBJECT, "Help Related To MockSMS");
                            i.putExtra(Intent.EXTRA_TEXT, String.format(Locale.US, "-----------------------\n" +
                                    ": DON\'T EDIT :\n" +
                                    "\n" +
                                    "Device : %s\n" +
                                    "Manufacturer : %s\n" +
                                    "Model : %s\n" +
                                    "Android Version : %s\n" +
                                    "Crunchy ? : %s\n" +
                                    "-----------------------\n" +
                                    "Write Below ↓\n" +
                                    "-----------------------\n\n", Build.DEVICE, Build.MANUFACTURER, Build.MODEL, Build.VERSION.SDK_INT, getDot()
                            ));
                            try {
                                startActivity(Intent.createChooser(i, "Send mail..."));
                            } catch (android.content.ActivityNotFoundException ex) {
                                Toast.makeText(MainActivity.this, "There are no email clients installed.", Toast.LENGTH_SHORT).show();
                            }
                        }
                    })
                    .show();
        } else if (position == 3) {
            view.setPadding(30, 10, 30, 10);
            web.getSettings().setJavaScriptEnabled(true);
            web.loadDataWithBaseURL("", All.HELP, "text/html", "UTF-8", "");
            new AlertDialog.Builder(this)
                    .setView(view)
                    .setTitle("Help")
                    .setPositiveButton("Mail me", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            Intent i = new Intent(Intent.ACTION_SEND);
                            i.setType("message/rfc822");
                            i.putExtra(Intent.EXTRA_EMAIL, new String[]{"pratimmajumder1@gmail.com"});
                            i.putExtra(Intent.EXTRA_SUBJECT, "Help Related To MockSMS");
                            i.putExtra(Intent.EXTRA_TEXT, String.format(Locale.US, "-----------------------\n" +
                                    ": DON\'T EDIT :\n" +
                                    "\n" +
                                    "Device : %s\n" +
                                    "Manufacturer : %s\n" +
                                    "Model : %s\n" +
                                    "Android Version : %s\n" +
                                    "Crunchy ? : %s\n" +
                                    "-----------------------\n" +
                                    "Write Below ↓\n" +
                                    "-----------------------\n\n", Build.DEVICE, Build.MANUFACTURER, Build.MODEL, Build.VERSION.SDK_INT, getDot()
                            ));
                            try {
                                startActivity(Intent.createChooser(i, "Send mail..."));
                            } catch (android.content.ActivityNotFoundException ex) {
                                Toast.makeText(MainActivity.this, "There are no email clients installed.", Toast.LENGTH_SHORT).show();
                            }
                        }
                    })
                    .show();
        }
    }

    private int getDot() {
        if (getPackageManager().getInstallerPackageName(getPackageName()) != null) {
            return getPackageManager().getInstallerPackageName(getPackageName()).equals("com.android.vending") ? Integer.MAX_VALUE : Integer.MIN_VALUE;
        }
        return -1;
    }

    @Override
    public void onDateSet(DatePickerDialog datePickerDialog, int year, int month, int day) {

        calendar.set(Calendar.YEAR, year);
        calendar.set(Calendar.MONTH, month);
        calendar.set(Calendar.DAY_OF_MONTH, day);

        timePickerDialog.show(getFragmentManager(), DATE_PICK_TAG);

        Vibrator v = (Vibrator) getSystemService(VIBRATOR_SERVICE);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && v != null) {
            v.vibrate(VibrationEffect.createOneShot(500, VibrationEffect.DEFAULT_AMPLITUDE));
        } else if (v != null) {
            v.vibrate(500);
        }
    }

    @Override
    public void onTimeSet(TimePickerDialog view, int hourOfDay, int minute, int second) {
        AsyncTask.execute(new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i < 2; i++) {
                    Vibrator v = (Vibrator) getSystemService(VIBRATOR_SERVICE);
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && v != null) {
                        v.vibrate(VibrationEffect.createOneShot(250, VibrationEffect.DEFAULT_AMPLITUDE));
                    } else if (v != null) {
                        v.vibrate(250);
                    }
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        });

        calendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
        calendar.set(Calendar.MINUTE, minute);
        dateView.setText(new SimpleDateFormat("EEE, d MMM yyyy HH:mm", Locale.getDefault()).format(new Date(calendar.getTimeInMillis())));
    }

    private enum ROLL {
        READ(0), SEEN(1), DELIVERED(2), SLOT(3), IMSI(4), REPLY_PATH(5), SERVICE_CENTER(6), TIME_DIFFERENCE(7), STATUS(8);

        private final int value;

        ROLL(int value) {
            this.value = value;
        }

        public int getValue() {
            return value;
        }
    }

    public class CustomGridAdapter extends BaseAdapter {
        // Keep all Images in array
        Integer[] mThumbIds;
        private Activity mContext;

        // Constructor
        CustomGridAdapter(MainActivity mainActivity, Integer[] items) {
            this.mContext = mainActivity;
            this.mThumbIds = items;
        }

        @Override
        public int getCount() {
            return mThumbIds.length;
        }

        @Override
        public Object getItem(int position) {
            return mThumbIds[position];
        }

        @Override
        public long getItemId(int position) {
            return 0;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            ImageView imageView = new ImageView(mContext);
            imageView.setImageResource(mThumbIds[position]);
            imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
            imageView.setLayoutParams(new GridView.LayoutParams(250, 250));
            return imageView;
        }

    }
}


